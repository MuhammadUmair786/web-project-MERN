{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { SET_STUDENT, SET_ERRORS_HELPER, SET_ERRORS, STUDENT_UPDATE_PASSWORD, SET_OTP, SET_FLAG } from '../actionTypes';\nexport const setChatHistory = data => {\n  return {\n    type: \"SET_CHAT\",\n    payload: data\n  };\n};\n\nconst setStudent = data => {\n  return {\n    type: SET_STUDENT,\n    payload: data\n  };\n};\n\nconst chatHelp = data => {\n  return {\n    type: \"CHAT_HELPER\",\n    payload: data\n  };\n};\n\nconst getStudentByRegNameHelper = data => {\n  return {\n    type: \"GET_STUDENT_BY_REG_NUM\",\n    payload: data\n  };\n};\n\nconst privateConversation = data => {\n  return {\n    type: \"GET_PRIVATE_CONVERSATION\",\n    payload: data\n  };\n};\n\nconst privateConversation2 = data => {\n  return {\n    type: \"GET_PRIVATE_CONVERSATION2\",\n    payload: data\n  };\n};\n\nconst newerChatsHelper = data => {\n  return {\n    type: \"GET_NEWER_CHATS\",\n    payload: data\n  };\n};\n\nconst previousChatsHelper = data => {\n  return {\n    type: \"GET_PREVIOUS_CHATS\",\n    payload: data\n  };\n};\n\nconst getAllSubjectsHelper = data => {\n  return {\n    type: \"GET_ALL_SUBJECTS\",\n    payload: data\n  };\n};\n\nconst fetchAttendenceHelper = data => {\n  return {\n    type: \"GET_ATTENDENCE\",\n    payload: data\n  };\n};\n\nconst getMarksHelper = data => {\n  return {\n    type: \"GET_MARKS\",\n    payload: data\n  };\n};\n\nexport const studentLogin = studentCredential => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: \"https://apna-erp.herokuapp.com/api/student/login\",\n        data: studentCredential\n      });\n      const {\n        token\n      } = data; // Set token to local Storage\n\n      localStorage.setItem('studentJwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      const decoded = jwt_decode(token); // Set current user\n\n      dispatch(setStudent(decoded));\n    } catch (err) {\n      dispatch({\n        type: SET_ERRORS_HELPER,\n        payload: err.response.data\n      });\n    }\n  };\n};\nexport const studentUpdatePassword = passwordData => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: \"https://apna-erp.herokuapp.com/api/student/updatePassword\",\n        data: passwordData\n      });\n      alert(\"Password Updated Successfully\");\n    } catch (err) {\n      dispatch({\n        type: SET_ERRORS_HELPER,\n        payload: err.response.data\n      });\n    }\n  };\n};\nexport const chatHelper = name => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: \"https://apna-erp.herokuapp.com/api/student/getStudentByName\",\n        data: name\n      });\n      dispatch(chatHelp(data.result));\n    } catch (err) {\n      console.log('error in recent', err.message);\n    }\n  };\n};\nexport const getStudentByRegName = registrationNumber => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: \"https://apna-erp.herokuapp.com/api/student/getStudentByRegName\",\n        data: {\n          registrationNumber\n        }\n      });\n      dispatch(getStudentByRegNameHelper(data.result));\n    } catch (err) {\n      console.log('Error in getting student by registration number', err.message);\n    }\n  };\n};\nexport const getOTPStudent = studentEmail => {\n  return async dispatch => {\n    try {\n      await axios({\n        method: 'Post',\n        url: 'https://apna-erp.herokuapp.com/api/student/forgotPassword',\n        data: studentEmail\n      });\n      alert(\"Otp has been sent to your email\");\n      dispatch({\n        type: SET_FLAG\n      });\n    } catch (err) {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    }\n  };\n};\nexport const submitOTPStudent = (newPasswordWithOtp, history) => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: \"https://apna-erp.herokuapp.com/api/student/postOTP\",\n        data: newPasswordWithOtp\n      });\n      alert(\"Password Update, kindly login with updated password\");\n      history.push('/');\n    } catch (err) {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    }\n  };\n};\nexport const sendMessage = (room, messageobj) => {\n  return async () => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: `https://apna-erp.herokuapp.com/api/student/chat/${room}`,\n        data: messageobj\n      });\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const getPrivateConversation = roomId => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: `https://apna-erp.herokuapp.com/api/student/chat/${roomId}`\n      });\n      dispatch(privateConversation(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const getPrivateConversation2 = roomId => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: `https://apna-erp.herokuapp.com/api/student/chat/${roomId}`\n      });\n      dispatch(privateConversation2(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const previousChats = senderName => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: `https://apna-erp.herokuapp.com/api/student/chat/previousChats/${senderName}`\n      });\n      dispatch(previousChatsHelper(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const newerChats = receiverName => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: `https://apna-erp.herokuapp.com/api/student/chat/newerChats/${receiverName}`\n      });\n      dispatch(newerChatsHelper(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const studentUpdate = updatedData => {\n  return async () => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Post',\n        url: `https://apna-erp.herokuapp.com/api/student/updateProfile`,\n        data: updatedData\n      });\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const getAllSubjects = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: \"https://apna-erp.herokuapp.com/api/student/getAllSubjects\"\n      });\n      dispatch(getAllSubjectsHelper(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const fetchAttendence = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: \"https://apna-erp.herokuapp.com/api/student/checkAttendence\"\n      });\n      dispatch(fetchAttendenceHelper(data.result));\n    } catch (err) {\n      console.log(\"Error in sending message\", err.message);\n    }\n  };\n};\nexport const getMarks = () => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await axios({\n        method: 'Get',\n        url: \"https://apna-erp.herokuapp.com/api/student/getMarks\"\n      });\n      dispatch(getMarksHelper(data.result));\n    } catch (err) {\n      console.log(\"Error in getting marks\", err.message);\n    }\n  };\n};\nexport const setStudentUser = data => {\n  return {\n    type: SET_STUDENT,\n    payload: data\n  };\n};\nexport const studentLogout = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('studentJwtToken'); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n  dispatch(setStudent({}));\n};","map":{"version":3,"sources":["C:/Users/Sajid Bashir/Documents/Web_Projects_NodeJS/college-erp-master/client/src/redux/action/studentAction.js"],"names":["axios","setAuthToken","jwt_decode","SET_STUDENT","SET_ERRORS_HELPER","SET_ERRORS","STUDENT_UPDATE_PASSWORD","SET_OTP","SET_FLAG","setChatHistory","data","type","payload","setStudent","chatHelp","getStudentByRegNameHelper","privateConversation","privateConversation2","newerChatsHelper","previousChatsHelper","getAllSubjectsHelper","fetchAttendenceHelper","getMarksHelper","studentLogin","studentCredential","dispatch","method","url","token","localStorage","setItem","decoded","err","response","studentUpdatePassword","passwordData","alert","chatHelper","name","result","console","log","message","getStudentByRegName","registrationNumber","getOTPStudent","studentEmail","submitOTPStudent","newPasswordWithOtp","history","push","sendMessage","room","messageobj","getPrivateConversation","roomId","getPrivateConversation2","previousChats","senderName","newerChats","receiverName","studentUpdate","updatedData","getAllSubjects","fetchAttendence","getMarks","setStudentUser","studentLogout","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken'\nimport jwt_decode from 'jwt-decode';\nimport { SET_STUDENT, SET_ERRORS_HELPER, SET_ERRORS, STUDENT_UPDATE_PASSWORD, SET_OTP, SET_FLAG } from '../actionTypes'\n\n\n\n\nexport const setChatHistory = (data) => {\n    return {\n        type: \"SET_CHAT\",\n        payload: data\n    }\n}\n\n\nconst setStudent = (data) => {\n    return {\n        type: SET_STUDENT,\n        payload: data\n    }\n}\n\nconst chatHelp = (data) => {\n    return {\n        type: \"CHAT_HELPER\",\n        payload: data\n    }\n}\n\nconst getStudentByRegNameHelper = (data) => {\n    return {\n        type: \"GET_STUDENT_BY_REG_NUM\",\n        payload: data\n    }\n}\n\n\n\nconst privateConversation = (data) => {\n    return {\n        type: \"GET_PRIVATE_CONVERSATION\",\n        payload: data\n    }\n}\n\nconst privateConversation2 = (data) => {\n    return {\n        type: \"GET_PRIVATE_CONVERSATION2\",\n        payload: data\n    }\n}\n\nconst newerChatsHelper = (data) => {\n    return {\n        type: \"GET_NEWER_CHATS\",\n        payload: data\n    }\n}\n\nconst previousChatsHelper = (data) => {\n    return {\n        type: \"GET_PREVIOUS_CHATS\",\n        payload: data\n    }\n}\n\nconst getAllSubjectsHelper = (data) => {\n    return {\n        type: \"GET_ALL_SUBJECTS\",\n        payload: data\n    }\n}\n\nconst fetchAttendenceHelper = (data) => {\n    return {\n        type: \"GET_ATTENDENCE\",\n        payload: data\n    }\n}\n\nconst getMarksHelper = (data) => {\n    return {\n        type: \"GET_MARKS\",\n        payload: data\n    }\n    \n}\n\nexport const studentLogin = (studentCredential) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: \"https://apna-erp.herokuapp.com/api/student/login\",\n                data: studentCredential\n            })\n            const { token } = data;\n            // Set token to local Storage\n            localStorage.setItem('studentJwtToken', token);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setStudent(decoded))\n           \n        }\n        catch (err) {\n            dispatch({\n                type: SET_ERRORS_HELPER,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\n\nexport const studentUpdatePassword = (passwordData) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: \"https://apna-erp.herokuapp.com/api/student/updatePassword\",\n                data: passwordData\n            })\n            alert(\"Password Updated Successfully\")\n        }\n        catch (err) {\n            dispatch({\n                type: SET_ERRORS_HELPER,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const chatHelper = (name) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: \"https://apna-erp.herokuapp.com/api/student/getStudentByName\",\n                data: name\n            })\n            dispatch(chatHelp(data.result))\n        }\n        catch (err) {\n            console.log('error in recent',err.message)\n        }\n    }\n}\n\nexport const getStudentByRegName = (registrationNumber) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: \"https://apna-erp.herokuapp.com/api/student/getStudentByRegName\",\n                data: { registrationNumber }\n            })\n            dispatch(getStudentByRegNameHelper(data.result))\n        }\n        catch (err) {\n            console.log('Error in getting student by registration number', err.message)\n        }\n    }\n    \n}\n\n\n\n\n\nexport const getOTPStudent = (studentEmail) => {\n    return async (dispatch) => {\n        try {\n            await axios({\n                method: 'Post',\n                url: 'https://apna-erp.herokuapp.com/api/student/forgotPassword',\n                data: studentEmail\n            })\n            alert(\"Otp has been sent to your email\")\n            dispatch({type:SET_FLAG})\n        }\n        catch (err) {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\n\nexport const submitOTPStudent = (newPasswordWithOtp, history) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: \"https://apna-erp.herokuapp.com/api/student/postOTP\" ,\n                data:newPasswordWithOtp\n            })\n            alert(\"Password Update, kindly login with updated password\")\n            history.push('/')\n        }\n        catch (err){\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const sendMessage = (room,messageobj) => {\n    return async () => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: `https://apna-erp.herokuapp.com/api/student/chat/${room}`,\n                data: messageobj\n            })\n        }\n        catch (err) {\n            console.log(\"Error in sending message\",err.message)\n        }\n    }\n}\n\n\nexport const getPrivateConversation = (roomId) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: `https://apna-erp.herokuapp.com/api/student/chat/${roomId}`,\n            })\n            dispatch(privateConversation(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\nexport const getPrivateConversation2 = (roomId) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: `https://apna-erp.herokuapp.com/api/student/chat/${roomId}`,\n            })\n            dispatch(privateConversation2(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\nexport const previousChats = (senderName) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: `https://apna-erp.herokuapp.com/api/student/chat/previousChats/${senderName}`,\n            })\n            dispatch(previousChatsHelper(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\n\nexport const newerChats = (receiverName) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: `https://apna-erp.herokuapp.com/api/student/chat/newerChats/${receiverName}`,\n            })\n            dispatch(newerChatsHelper(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\nexport const studentUpdate = (updatedData) => {\n    return async () => {\n        try {\n            const { data } = await axios({\n                method: 'Post',\n                url: `https://apna-erp.herokuapp.com/api/student/updateProfile`,\n                data: updatedData\n            })\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\nexport const getAllSubjects = () => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: \"https://apna-erp.herokuapp.com/api/student/getAllSubjects\"\n            })\n            dispatch(getAllSubjectsHelper(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    }\n}\n\nexport const fetchAttendence = () => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: \"https://apna-erp.herokuapp.com/api/student/checkAttendence\"\n            })\n            dispatch(fetchAttendenceHelper(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in sending message\", err.message)\n        }\n    \n    }\n}\n\nexport const getMarks = () => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios({\n                method: 'Get',\n                url: \"https://apna-erp.herokuapp.com/api/student/getMarks\"\n            })\n           dispatch(getMarksHelper(data.result))\n        }\n        catch (err) {\n            console.log(\"Error in getting marks\", err.message)\n        }\n    }\n}\n\n\n\nexport const setStudentUser = data => {\n    return {\n        type: SET_STUDENT,\n        payload: data\n    };\n}\n\nexport const studentLogout = () =>\n    (dispatch) => {\n        // Remove token from localStorage\n        localStorage.removeItem('studentJwtToken');\n        // Remove auth header for future requests\n        setAuthToken(false);\n        // Set current user to {} which will set isAuthenticated to false\n        dispatch(setStudent({}));\n    };"]},"metadata":{},"sourceType":"module"}