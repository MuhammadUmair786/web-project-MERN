{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sajid Bashir\\\\Documents\\\\Web_Projects_NodeJS\\\\college-erp-master\\\\client\\\\src\\\\Pages\\\\Chat.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport HomeHelper from '../Components/HomeHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { sendMessage, getPrivateConversation, getPrivateConversation2 } from '../redux/action/studentAction';\nimport io from 'socket.io-client';\nimport { useHistory } from 'react-router-dom'; //Swap HelperFunction\n\nfunction swap(input, value_1, value_2) {\n  var temp = input[value_1];\n  input[value_1] = input[value_2];\n  input[value_2] = temp;\n}\n\nlet socket;\n\nconst Chat = props => {\n  const store = useSelector(store => store);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [room1, setRoom1] = useState(\"\");\n  const [room2, setRoom2] = useState(\"\");\n  const [receiverRegistrationNumber, setReceiverRegistrationNumber] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageArray, setMessageArray] = useState([]);\n  const [olderMessages, setOlderMessages] = useState([]);\n  const ENDPOINT = 'https://apna-erp.herokuapp.com';\n  useEffect(() => {\n    let temp = props.match.params.room;\n    socket = io(ENDPOINT);\n    let tempArr = temp.split(\".\");\n    setReceiverRegistrationNumber(tempArr[0]);\n    setRoom1(temp);\n    swap(tempArr, 0, 1);\n    let tempRoom2 = tempArr[0] + '.' + tempArr[1];\n    setRoom2(tempRoom2);\n  }, [ENDPOINT, props.match.params.room]);\n  useEffect(() => {\n    dispatch(getPrivateConversation(room1));\n    dispatch(getPrivateConversation2(room2));\n    socket = io(ENDPOINT);\n    socket.emit('join room', {\n      room1,\n      room2\n    });\n    socket.on(\"new Message\", data => {\n      setMessageArray([...messageArray, data]);\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [room1, room2]);\n\n  const formHandler = e => {\n    e.preventDefault();\n\n    if (message.trim().length > 0) {\n      socket.emit(\"private message\", {\n        sender: store.student.student.student.name,\n        message,\n        room: room1\n      });\n      setMessage(\"\");\n      let messageObj = {\n        roomId: room1,\n        senderName: store.student.student.student.name,\n        senderId: store.student.student.student._id,\n        message,\n        senderRegistrationNumber: store.student.student.student.registrationNumber,\n        receiverRegistrationNumber\n      };\n      dispatch(sendMessage(room1, messageObj));\n    } else {\n      alert(\"Can't send empty message\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"new Message\", data => {\n      setOlderMessages(store.student.privateChat);\n      setMessageArray([...messageArray, data]);\n    });\n  }, [messageArray, olderMessages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, store.student.isAuthenticated ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HomeHelper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    onSubmit: formHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    placeholder: \"Type here..\",\n    type: \"text\",\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary ml-1 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, \"Send\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, store.student.privateChat.map((obj, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 41\n    }\n  }, obj.senderName, \": \", obj.message, \", \", obj.createdAt))), messageArray.map((obj, index) => /*#__PURE__*/React.createElement(\"p\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }, obj.sender, \": \", obj.message)))))) : history.push('/'));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/Sajid Bashir/Documents/Web_Projects_NodeJS/college-erp-master/client/src/Pages/Chat.jsx"],"names":["React","useState","useEffect","HomeHelper","useSelector","useDispatch","sendMessage","getPrivateConversation","getPrivateConversation2","io","useHistory","swap","input","value_1","value_2","temp","socket","Chat","props","store","history","dispatch","room1","setRoom1","room2","setRoom2","receiverRegistrationNumber","setReceiverRegistrationNumber","message","setMessage","messageArray","setMessageArray","olderMessages","setOlderMessages","ENDPOINT","match","params","room","tempArr","split","tempRoom2","emit","on","data","off","formHandler","e","preventDefault","trim","length","sender","student","name","messageObj","roomId","senderName","senderId","_id","senderRegistrationNumber","registrationNumber","alert","privateChat","isAuthenticated","target","value","map","obj","index","createdAt","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport HomeHelper from '../Components/HomeHelper'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { sendMessage, getPrivateConversation, getPrivateConversation2} from '../redux/action/studentAction'\nimport io from 'socket.io-client';\nimport { useHistory } from 'react-router-dom';\n\n//Swap HelperFunction\nfunction swap(input, value_1, value_2) {\n    var temp = input[value_1];\n    input[value_1] = input[value_2];\n    input[value_2] = temp;\n}\n\n\nlet socket;\n\n\nconst Chat = (props) => {\n    \n    const store = useSelector((store) => store)\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const [room1, setRoom1] = useState(\"\")\n    const [room2, setRoom2] = useState(\"\")\n    const [receiverRegistrationNumber, setReceiverRegistrationNumber] = useState(\"\")\n    const [message, setMessage] = useState(\"\")\n    const [messageArray, setMessageArray] = useState([])\n    const [olderMessages, setOlderMessages] = useState([])\n    const ENDPOINT = 'https://apna-erp.herokuapp.com'\n\n    useEffect(() => {\n        let temp = props.match.params.room\n        socket = io(ENDPOINT)\n        let tempArr = temp.split(\".\")\n        setReceiverRegistrationNumber(tempArr[0])\n        setRoom1(temp)\n        swap(tempArr, 0, 1)\n        let tempRoom2 = tempArr[0] + '.' + tempArr[1]\n        setRoom2(tempRoom2)\n    }, [ENDPOINT, props.match.params.room])\n    \n\n    useEffect(() => {\n        dispatch(getPrivateConversation(room1))\n        dispatch(getPrivateConversation2(room2))\n        socket = io(ENDPOINT)\n        socket.emit('join room', {\n            room1,\n            room2\n        })\n        socket.on(\"new Message\", (data) => {\n            setMessageArray([...messageArray, data])\n        })\n        return () => {\n            socket.emit('disconnect')\n            socket.off()\n        }\n    }, [room1, room2])\n\n\n    \n    const formHandler = (e) => {\n        e.preventDefault()\n        if (message.trim().length > 0) {\n            socket.emit(\"private message\", {\n                sender: store.student.student.student.name,\n                message,\n                room: room1\n            })\n            setMessage(\"\")\n            let messageObj = {\n                roomId: room1,\n                senderName: store.student.student.student.name,\n                senderId: store.student.student.student._id,\n                message,\n                senderRegistrationNumber: store.student.student.student.registrationNumber,\n                receiverRegistrationNumber\n            }\n            dispatch(sendMessage(room1,messageObj))\n        }\n        else {\n            alert(\"Can't send empty message\")\n        }\n    }\n\n\n    useEffect(() => {\n        socket.on(\"new Message\", (data) => {\n            setOlderMessages(store.student.privateChat)\n            setMessageArray([...messageArray, data])\n        })\n        \n    },[messageArray,olderMessages])\n   \n\n    return (\n        <div>\n            {store.student.isAuthenticated ? <>\n                <HomeHelper />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-5\">\n                            <form className=\"form-inline\" onSubmit={formHandler}>\n                                <div className=\"form-group \">\n                                    {/* <input value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Type here..\" type=\"text\" className=\"form-control\" /> */}\n                                    <textarea value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Type here..\" type=\"text\" className=\"form-control\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary ml-1 \">Send</button>\n                            </form>\n                        </div>\n                        <div className=\"col-md-7\">\n                            {\n                                store.student.privateChat.map((obj,index) =>\n                                    <div key={index}>\n                                        <p>{obj.senderName}: {obj.message}, {obj.createdAt}</p>\n                                    </div>\n                                )\n                            }\n                            {messageArray.map((obj, index) =>\n                                <p key={index}>{obj.sender}: {obj.message}</p>\n                            )}\n\n                        </div>\n\n                    </div>\n\n                </div>\n            </> : (history.push('/'))}\n            \n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}